swagger: "2.0"

info:
  title: "Tid App Api"
  version: "1.0"
  description: "Blank"
  contact:
    name: Melisa
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

basePath: /api

schemes:
  - http

paths:
  /books/get_all_books:
    get:
      operationId: api.books.get_all_books
      produces:
        - application/json
      responses:
        201:
          description: Successfully got all books

  /books/get_user_favorite_books/{user_id}:
    get:
      operationId: api.books.get_user_favorite_books
      parameters:
        - in: path
          name: user_id
          type: string
          required: true
          description: User id to get favorite books.
      produces:
        - application/json
      responses:
        201:
          description: Successfully got favorite books

  /books/add_favorite_book:
    post:
      operationId: api.books.add_favorite_book
      parameters:
        - in: body
          name: favorite_payload
          description: Favorite to add
          schema:
            $ref: "#/definitions/Favorite"
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        201:
          description: Successfully added favorite book

  /books/remove_favorite_book:
    post:
      operationId: api.books.remove_favorite_book
      parameters:
        - in: body
          name: favorite_payload
          description: Favorite to add
          schema:
            $ref: "#/definitions/Favorite"
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        201:
          description: Successfully removed favorite book

  /book_contents/get_last_read_sentence:
    post:
      operationId: api.book_contents.get_last_read_sentence
      parameters:
        - in: body
          name: last_read_sentence_payload
          description: last_read_sentence_payload to get
          schema:
            $ref: "#/definitions/last_read_sentence"
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        201:
          description: Successfully got last read sentence

  /book_contents/update_last_read_sentence:
    post:
      operationId: api.book_contents.update_last_read_sentence
      parameters:
        - in: body
          name: last_read_sentence_update_payload
          description: last_read_sentence to update
          schema:
            $ref: "#/definitions/last_read_sentence_update"
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        201:
          description: Successfully updated last read sentence

  /books/insert_book:
    post:
      operationId: api.books.insert_book
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - in: formData
          name: cover_image
          type: file
          required: true
          description: The cover image of the book to upload.
        - in: formData
          name: book_title
          type: string
          required: true
          description: Title of the book.

      responses:
        201:
          description: Successfully added book to the DB
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists

  /book_contents/{book_id}:
    get:
      operationId: api.book_contents.get_book_contents
      parameters:
        - in: path
          name: book_id
          type: string
          required: true
          description: Book id to get the sentences of.
      responses:
        200:
          description: "Fetch a book's sentences from the database"
          schema:
            $ref: "#/definitions/Sentence"

  /book_contents/add_sentence:
    post:
      operationId: api.book_contents.add_sentence
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: sentence_payload
          description: Sentence to add
          schema:
            $ref: "#/definitions/Sentence"
      responses:
        201:
          description: Successfully added sentence to the DB
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists

  /book_contents/add_sentence_transcription:
    post:
      operationId: api.book_contents.add_sentence_transcription
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: st_payload
          description: Sentence transcription to add
          schema:
            $ref: "#/definitions/SentenceTranscription"
      responses:
        201:
          description: Successfully added sentence transcription to the DB
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists

  /book_contents/add_transcription:
    post:
      operationId: api.book_contents.add_transcription
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: transcript_payload
          description: transcription to add
          schema:
            $ref: "#/definitions/Transcription"
      responses:
        201:
          description: Successfully added transcription to the DB
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists

  /analytics/get_daily_unique_visits:
    get:
      operationId: api.analytics.get_daily_unique_visits
      produces:
        - application/json
      responses:
        200:
          description: Success

  /analytics/get_book_favorite_counts:
    get:
      operationId: api.analytics.get_book_favorite_counts
      produces:
        - application/json
      responses:
        200:
          description: Success

  /users/get_all_users:
    get:
      operationId: api.users.get_all_users
      produces:
        - application/json
      responses:
        200:
          description: Success

  /transcripts/get_all_transcripts:
    get:
      operationId: api.transcripts.get_all_transcripts
      produces:
        - application/json
      responses:
        200:
          description: Success

  /transcripts/get_by_transcript_string/{transcript_string}:
    get:
      operationId: api.transcripts.get_by_transcript_string
      parameters:
        - in: path
          name: transcript_string
          type: string
          required: true
          description: transcript_string.
      produces:
        - application/json
      responses:
        200:
          description: Success

  /users/register:
    post:
      operationId: api.users.register
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: register_payload
          description: User to register
          schema:
            $ref: "#/definitions/Register"
      responses:
        201:
          description: Successfully registered user
        400:
          description: User exists

  /users/login:
    post:
      operationId: api.users.login
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: login_payload
          description: User to login
          schema:
            $ref: "#/definitions/Login"
      responses:
        201:
          description: Login success, user id returned
        400:
          description: User not found
        401:
          description: Invalid password

definitions:
  Favorite:
    type: object
    properties:
      user_id: { type: string }
      book_id: { type: string }
  last_read_sentence_update:
    type: object
    properties:
      user_id: { type: string }
      book_id: { type: string }
      last_sentence_id: { type: string }
  last_read_sentence:
    type: object
    properties:
      user_id: { type: string }
      book_id: { type: string }
  Book:
    type: object
    properties:
      id: { type: string }
      book_title: { type: string }
      cover_path: { type: string }
  Sentence:
    type: object
    properties:
      id: { type: string }
      nth_sentence: { type: string }
      book_id: { type: string }
      sentence: { type: string }
  SentenceTranscription:
    type: object
    properties:
      id: { type: string }
      transcript_id: { type: string }
      sentence_id: { type: string }
      nth_transcription: { type: string }
  Transcription:
    type: object
    properties:
      id: { type: string }
      transcription: { type: string }
      media_path: { type: string }
  Register:
    type: object
    properties:
      user_name: { type: string }
      email: { type: string }
      password: { type: string }
  Login:
    type: object
    properties:
      email: { type: string }
      password: { type: string }
